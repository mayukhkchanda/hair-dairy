{"version":3,"sources":["actions/types.js","reducers/index.js","reducers/ImageSelectionReducer.js","reducers/ImageRefReducer.js","reducers/ImageAddedReducer.js","reducers/CurrentMonthReducer.js","components/TopHeader.js","actions/index.js","components/RoundedText.js","components/Star.js","components/Cell.js","components/Row.js","hooks/onVIsible.js","components/CalandarBody.js","components/Calendar.js","components/imggalary/ImageCard.js","components/imggalary/ImageGallary.js","App.js","index.js"],"names":["IMAGE_SELECTED","GOT_IMAGE_REF","IMAGE_ADDED","CURRENT_MONTH_REF","reducers","combineReducers","selectedImage","state","action","type","payload","imageNode","imgNode","imagesObjList","imageList","imageDataObj","CurrentMonthNode","currentMonthNode","TopHeader","headerMonth","headerYear","Date","getFullYear","className","imageSelected","imageObj","colorArr","RoundedText","text","fontSize","circleSize","index","Math","ceil","random","length","backgroundColor","Star","starsCount","stars","i","push","connect","newImageAdded","date","isGray","cellData","useEffect","month","year","url","urls","thumb","alt_desc","alt_description","getMonth","onClick","src","alt","dateNo","getDay","getWeekday","substr","toUpperCase","Row","weekDates","data","map","JSON","stringify","OnVisible","ref_el","Steps","useState","isIntersecting","setIntersecting","steps","ref_el_node","current","observer","IntersectionObserver","entry","root","rootmargin","threshold","Array","fill","el","filter","observe","unobserve","currentMonthRefAct","setHeaderMonth","showFullMonth","monthRef","useRef","currentMonthVis","forMonth","ref","dates","arr","Fragment","Calendar","weekdays","setState","renderMonths","props","months","this","isBottom","weekday","React","Component","selectedImg","gotImageRef","cardRef","isVisible","fullMonth","toLocaleString","ImageGallary","scrollIntoView","renderedList","imagesList","App","displayEl","today","thisYear","thisMonth","Months","_","datesGenerator","startingDay","rootElement","document","getElementById","ReactDOM","render","store","createStore"],"mappings":"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","file":"static/js/main.5d4b1f9d.chunk.js","sourcesContent":["const IMAGE_SELECTED = \"IMAGE_SELECTED\";\r\nconst GOT_IMAGE_REF = \"GOT_IMAGE_REF\";\r\nconst IMAGE_ADDED = \"IMAGE_ADDED\";\r\nconst CURRENT_MONTH_REF = \"CURRENT_MONTH_REF\";\r\n\r\nexport { IMAGE_SELECTED, GOT_IMAGE_REF, IMAGE_ADDED, CURRENT_MONTH_REF };\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport { ImageSelectionReducer } from \"./ImageSelectionReducer\";\r\nimport { ImageRefReducer } from \"./ImageRefReducer\";\r\nimport { ImageAddedReducer } from \"./ImageAddedReducer\";\r\nimport { CurrentMonthReducer } from \"./CurrentMonthReducer\";\r\n\r\nconst reducers = combineReducers({\r\n  selectedImage: ImageSelectionReducer,\r\n  imageNode: ImageRefReducer,\r\n  imagesObjList: ImageAddedReducer,\r\n  CurrentMonthNode: CurrentMonthReducer,\r\n});\r\n\r\nexport default reducers;\r\n","import { IMAGE_SELECTED } from \"../actions/types\";\r\n\r\n/* const __INIT_STATE = {\r\n  date: null,\r\n  month: null,\r\n  url: null,\r\n}; */\r\n\r\nexport const ImageSelectionReducer = (state = null, action) => {\r\n  switch (action.type) {\r\n    case IMAGE_SELECTED:\r\n      return action.payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { GOT_IMAGE_REF } from \"../actions/types\";\r\n\r\nexport const ImageRefReducer = (imgNode = null, action) => {\r\n  switch (action.type) {\r\n    case GOT_IMAGE_REF:\r\n      return action.payload.imageNode;\r\n\r\n    default:\r\n      return imgNode;\r\n  }\r\n};\r\n","import { IMAGE_ADDED } from \"../actions/types\";\r\n\r\nexport const ImageAddedReducer = (imageList = [], action) => {\r\n  switch (action.type) {\r\n    case IMAGE_ADDED:\r\n      return [...imageList, action.payload.imageDataObj];\r\n\r\n    default:\r\n      return imageList;\r\n  }\r\n};\r\n","import { CURRENT_MONTH_REF } from \"../actions/types\";\r\n\r\nexport const CurrentMonthReducer = (currentMonthNode = null, action) => {\r\n  switch (action.type) {\r\n    case CURRENT_MONTH_REF:\r\n      return action.payload;\r\n\r\n    default:\r\n      return currentMonthNode;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport \"./TopHeader.css\";\r\n\r\nconst TopHeader = ({ headerMonth }) => {\r\n  const headerYear = new Date().getFullYear();\r\n\r\n  return (\r\n    <div className=\"top-header\">\r\n      <div className=\"left-floated\">\r\n        <span className=\"blue bold\">my</span>\r\n        <span className=\"bold\">&nbsp;hair dairy</span>\r\n      </div>\r\n      <div className=\"right-floated\">\r\n        <span className=\"bold\">{headerMonth}</span>\r\n        <span className=\"medium\">&nbsp;{headerYear}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopHeader;\r\n","import {\r\n  IMAGE_SELECTED,\r\n  GOT_IMAGE_REF,\r\n  IMAGE_ADDED,\r\n  CURRENT_MONTH_REF,\r\n} from \"./types\";\r\n\r\nexport const imageSelected = (imageObj) => {\r\n  return {\r\n    type: IMAGE_SELECTED,\r\n    payload: imageObj,\r\n  };\r\n};\r\n\r\nexport const gotImageRef = (imageNode) => {\r\n  return {\r\n    type: GOT_IMAGE_REF,\r\n    payload: { imageNode },\r\n  };\r\n};\r\n\r\nexport const newImageAdded = (imageDataObj) => {\r\n  return {\r\n    type: IMAGE_ADDED,\r\n    payload: { imageDataObj },\r\n  };\r\n};\r\n\r\nexport const currentMonthRefAct = (currentMonthNode) => {\r\n  return {\r\n    type: CURRENT_MONTH_REF,\r\n    payload: currentMonthNode,\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport \"./RoundedText.css\";\r\n\r\nconst colorArr = [\"purple\", \"violet\", \"yellow\"];\r\n\r\nconst RoundedText = ({ text, fontSize, circleSize }) => {\r\n  const index = Math.ceil(Math.random() * colorArr.length) - 1;\r\n\r\n  const backgroundColor = colorArr[index];\r\n\r\n  return (\r\n    <div\r\n      className={`rounded ${\r\n        circleSize ? circleSize : \"\"\r\n      } ${backgroundColor} roboto black ${fontSize}`}\r\n    >\r\n      {text}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RoundedText;\r\n","import React from \"react\";\r\nimport \"./Star.css\";\r\n\r\nconst Star = ({ starsCount, fontSize }) => {\r\n  if (!starsCount) return null;\r\n\r\n  const stars = [];\r\n  for (let i = 1; i <= 5; i++) {\r\n    stars.push(\r\n      <i\r\n        key={i}\r\n        className={`fa fa-star ${fontSize ? fontSize : \"\"} ${\r\n          i <= starsCount ? \"blue\" : \"grey\"\r\n        } `}\r\n      ></i>\r\n    );\r\n  }\r\n\r\n  return <span className=\"stars\">{stars}</span>;\r\n};\r\n\r\nexport default Star;\r\n","import React, { useEffect } from \"react\";\r\nimport { imageSelected, newImageAdded } from \"../actions\";\r\nimport RoundedText from \"./RoundedText\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport Star from \"./Star\";\r\n\r\nconst Cell = ({ date, isGray, cellData, imageSelected, newImageAdded }) => {\r\n  useEffect(() => {\r\n    if (cellData && cellData !== {}) {\r\n      newImageAdded({\r\n        date: date.date,\r\n        month: date.month,\r\n        year: date.year,\r\n        stars: cellData?.stars,\r\n        url: cellData?.urls?.thumb,\r\n        alt_desc: cellData?.alt_description,\r\n      });\r\n    }\r\n  }, [cellData, date, newImageAdded]);\r\n\r\n  const getMonth = (month) => {\r\n    switch (month) {\r\n      case 0:\r\n        return \"Jan\";\r\n\r\n      case 1:\r\n        return \"Feb\";\r\n\r\n      case 2:\r\n        return \"Mar\";\r\n\r\n      case 3:\r\n        return \"Apr\";\r\n\r\n      case 4:\r\n        return \"May\";\r\n\r\n      case 5:\r\n        return \"Jun\";\r\n\r\n      case 6:\r\n        return \"Jul\";\r\n\r\n      case 7:\r\n        return \"Aug\";\r\n\r\n      case 8:\r\n        return \"Sep\";\r\n\r\n      case 9:\r\n        return \"Oct\";\r\n\r\n      case 10:\r\n        return \"Nov\";\r\n\r\n      case 11:\r\n        return \"Dec\";\r\n\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  const getWeekday = () => {\r\n    const dateNo = new Date(date.year, date.month, date.date).getDay();\r\n\r\n    if (dateNo === 0 || dateNo === 6) return \"S\";\r\n    else if (dateNo === 1) return \"M\";\r\n    else if (dateNo === 2 || dateNo === 4) return \"T\";\r\n    else if (dateNo === 3) return \"W\";\r\n    else if (dateNo === 5) return \"F\";\r\n  };\r\n\r\n  return (\r\n    <div className={`cell ${isGray ? \"gray\" : \"\"}`}>\r\n      <h3 className=\"cell__header\">\r\n        {date.date}\r\n        <span className=\"cell__header_month\">\r\n          {`${date.date === 1 ? \" \" + getMonth(date.month) : \"\"}`}{\" \"}\r\n        </span>\r\n      </h3>\r\n      <div className=\"image-container\">\r\n        {cellData ? (\r\n          <>\r\n            <Star starsCount={cellData?.stars}></Star>\r\n            <img\r\n              onClick={() => {\r\n                //console.log(cellData?.urls?.thumb);\r\n                imageSelected({\r\n                  date: date.date,\r\n                  month: date.month,\r\n                  url: cellData?.urls?.thumb,\r\n                });\r\n              }}\r\n              className=\"image\"\r\n              src={cellData?.urls?.thumb}\r\n              alt={cellData?.alt_description}\r\n            />\r\n            <div className=\"cell_image_footer\">\r\n              <RoundedText text={getWeekday()} fontSize=\"medium\"></RoundedText>\r\n              <RoundedText\r\n                text={getMonth(date.month).substr(0, 2).toUpperCase()}\r\n                fontSize=\"small\"\r\n              ></RoundedText>\r\n            </div>\r\n          </>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, {\r\n  imageSelected,\r\n  newImageAdded,\r\n})(Cell);\r\n","import React, { Fragment } from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport \"./Row.css\";\r\n\r\nconst Row = ({ weekDates, data }) => {\r\n  return (\r\n    <div className=\"row\">\r\n      {weekDates.map((date, index) => {\r\n        return (\r\n          <Fragment key={JSON.stringify(date)}>\r\n            <Cell\r\n              date={date}\r\n              isGray={index === 0}\r\n              cellData={data[0][`${date.date}-${date.month + 1}-${date.year}`]}\r\n            ></Cell>\r\n          </Fragment>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport const OnVisible = (ref_el, Steps = null) => {\r\n  const [isIntersecting, setIntersecting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const thresholdSteps = (steps) =>\r\n      steps\r\n        ? Array(steps)\r\n            .fill(0)\r\n            .map((el, index) => index / steps || 0)\r\n            .filter((el) => el !== 0)\r\n        : [0.75];\r\n\r\n    const ref_el_node = ref_el?.current;\r\n\r\n    const observer = new IntersectionObserver(\r\n      ([entry], observer) => {\r\n        setIntersecting(entry.isIntersecting ?? false);\r\n      },\r\n      {\r\n        root: null,\r\n        rootmargin: \"0px\",\r\n        threshold: thresholdSteps(Steps),\r\n      }\r\n    );\r\n\r\n    if (ref_el_node) observer.observe(ref_el_node);\r\n\r\n    return () => {\r\n      //console.log(ref_el_copy);\r\n      if (ref_el_node) observer.unobserve(ref_el_node);\r\n    };\r\n  }, [ref_el, Steps]);\r\n\r\n  return isIntersecting;\r\n};\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport Row from \"./Row\";\r\nimport data from \"../Data.json\";\r\nimport { OnVisible } from \"../hooks/onVIsible\";\r\n\r\nimport { currentMonthRefAct } from \"../actions\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nconst CalandarBody = ({\r\n  month,\r\n  setHeaderMonth,\r\n  currentMonthRefAct,\r\n  showFullMonth,\r\n}) => {\r\n  //console.log(month);\r\n\r\n  const monthRef = useRef(null);\r\n\r\n  const currentMonthVis = OnVisible(monthRef, 5);\r\n\r\n  useEffect(() => {\r\n    if (currentMonthVis) {\r\n      setHeaderMonth(month.forMonth);\r\n    }\r\n  }, [currentMonthVis, month, setHeaderMonth]);\r\n\r\n  useEffect(() => {\r\n    const currentMonth = new Date().getMonth();\r\n\r\n    if (currentMonth === month.forMonth) {\r\n      currentMonthRefAct(monthRef.current);\r\n    }\r\n  }, [month, currentMonthRefAct]);\r\n\r\n  return (\r\n    <div ref={monthRef} className=\"calendar__body\">\r\n      {month?.dates &&\r\n        month?.dates\r\n          .filter((arr, index) => {\r\n            if (showFullMonth) return true;\r\n\r\n            return index !== month?.dates.length - 1;\r\n          })\r\n          .map((weekDates) => {\r\n            //console.log(weekDates);\r\n            return (\r\n              <React.Fragment key={JSON.stringify(weekDates)}>\r\n                <Row weekDates={weekDates} data={data} />\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, { currentMonthRefAct })(CalandarBody);\r\n","import React from \"react\";\r\nimport TopHeader from \"./TopHeader\";\r\nimport CalandarBody from \"./CalandarBody\";\r\nimport \"./Calendar.css\";\r\n\r\nclass Calendar extends React.Component {\r\n  weekdays = [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"];\r\n\r\n  state = { headerMonth: null };\r\n\r\n  getMonth = (month) => {\r\n    switch (month) {\r\n      case 0:\r\n        return \"Jan\";\r\n\r\n      case 1:\r\n        return \"Feb\";\r\n\r\n      case 2:\r\n        return \"Mar\";\r\n\r\n      case 3:\r\n        return \"Apr\";\r\n\r\n      case 4:\r\n        return \"May\";\r\n\r\n      case 5:\r\n        return \"Jun\";\r\n\r\n      case 6:\r\n        return \"Jul\";\r\n\r\n      case 7:\r\n        return \"Aug\";\r\n\r\n      case 8:\r\n        return \"Sep\";\r\n\r\n      case 9:\r\n        return \"Oct\";\r\n\r\n      case 10:\r\n        return \"Nov\";\r\n\r\n      case 11:\r\n        return \"Dec\";\r\n\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  setHeaderMonth = (month) => {\r\n    this.setState({ headerMonth: month });\r\n  };\r\n\r\n  renderMonths = () => {\r\n    return this.props.months.map((month, index) => {\r\n      return (\r\n        <CalandarBody\r\n          key={index}\r\n          month={month}\r\n          setHeaderMonth={this.setHeaderMonth}\r\n          showFullMonth={index === this.props.months.length - 1}\r\n        ></CalandarBody>\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <TopHeader\r\n          headerMonth={this.getMonth(this.state.headerMonth)}\r\n        ></TopHeader>\r\n\r\n        <div className=\"rounded-plus\">\r\n          <span className=\"plus-text\">&#65291;</span>\r\n        </div>\r\n\r\n        <div className={`calendar ${this.props.isBottom ? \"bottom\" : \"\"} `}>\r\n          <div className=\"calendar__header\">\r\n            {this.weekdays.map((weekday, index) => {\r\n              return (\r\n                <div className=\"calendar__weekday \" key={index}>\r\n                  {weekday}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          {this.renderMonths()}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calendar;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { OnVisible } from \"../../hooks/onVIsible\";\r\nimport { gotImageRef } from \"../../actions\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport Star from \"../Star\";\r\nimport RoundedText from \"../RoundedText\";\r\n\r\nfunction ImageCard({\r\n  url,\r\n  alt_desc,\r\n  date,\r\n  month,\r\n  year,\r\n  stars,\r\n  gotImageRef,\r\n  selectedImg,\r\n}) {\r\n  const cardRef = useRef(null);\r\n\r\n  const isVisible = OnVisible(cardRef);\r\n\r\n  //console.log(selectedImg);\r\n\r\n  const getWeekday = () => {\r\n    const dateNo = new Date(year, month, date).getDay();\r\n\r\n    if (dateNo === 0 || dateNo === 6) return \"S\";\r\n    else if (dateNo === 1) return \"M\";\r\n    else if (dateNo === 2 || dateNo === 4) return \"T\";\r\n    else if (dateNo === 3) return \"W\";\r\n    else if (dateNo === 5) return \"F\";\r\n  };\r\n\r\n  const fullMonth = new Date(year, month, date).toLocaleString(\"default\", {\r\n    month: \"long\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedImg.url === url) {\r\n      gotImageRef(cardRef);\r\n    }\r\n  }, [selectedImg.url, url, gotImageRef]);\r\n\r\n  return (\r\n    <div\r\n      ref={cardRef}\r\n      className={`image__showcase ${isVisible ? \"vis\" : \"invis\"}`}\r\n      key={url}\r\n    >\r\n      <div className=\"gradient\"></div>\r\n      <div className=\"image__container\">\r\n        <img src={url} alt={alt_desc} className=\"image__display\" />\r\n      </div>\r\n      <div className=\"image__content\">\r\n        <div className=\"content_header\">\r\n          <div className=\"rounded-text-container\">\r\n            <RoundedText\r\n              circleSize=\"bigCircle\"\r\n              text={getWeekday()}\r\n              fontSize={\"large\"}\r\n            ></RoundedText>\r\n            <RoundedText\r\n              circleSize=\"bigCircle\"\r\n              text={fullMonth.substr(0, 2).toUpperCase()}\r\n              fontSize={\"large\"}\r\n            ></RoundedText>\r\n          </div>\r\n          <div className=\"stars-container\">\r\n            <Star starsCount={stars} fontSize=\"medium\"></Star>\r\n          </div>\r\n        </div>\r\n        <h3 className=\"content__date\">{`${date} ${fullMonth}`}</h3>\r\n        <div className=\"content__text\">\r\n          Lorem ipsum dolor, sit amet consectetur adipisicing elit. Incidunt\r\n          reiciendis sed iure doloremque, fuga iusto...\r\n        </div>\r\n      </div>\r\n      {/* <hr /> */}\r\n      <div className=\"content__footer\">View full Post</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  //console.log(state);\r\n\r\n  return { selectedImg: state.selectedImage };\r\n};\r\n\r\nexport default connect(mapStateToProps, { gotImageRef })(ImageCard);\r\n","import React from \"react\";\r\nimport ImageCard from \"./ImageCard\";\r\nimport \"./imageGallary.css\";\r\nimport { imageSelected } from \"../../actions\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nclass ImageGallary extends React.Component {\r\n  componentDidUpdate() {\r\n    //console.log(this.props.imagesList);\r\n    this.props.imageNode.current.scrollIntoView();\r\n  }\r\n\r\n  render() {\r\n    const imageList = this.props.imagesList;\r\n\r\n    const renderedList = imageList\r\n      //.filter((el, index) => index < 10)\r\n      .map(({ url, alt_desc, date, month, year, stars }) => {\r\n        return (\r\n          <ImageCard\r\n            key={url}\r\n            url={url}\r\n            alt_desc={alt_desc}\r\n            date={date}\r\n            month={month}\r\n            year={year}\r\n            stars={stars}\r\n          ></ImageCard>\r\n        );\r\n      });\r\n\r\n    return (\r\n      <div className=\"image__slider\">\r\n        <div className=\"top-right\">\r\n          <button\r\n            className=\"button\"\r\n            onClick={() => this.props.imageSelected(null)}\r\n          >\r\n            <span className=\"button-text\">&times;</span>\r\n          </button>\r\n        </div>\r\n        {renderedList}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  //console.log(state);\r\n  return { imageNode: state.imageNode, imagesList: state.imagesObjList };\r\n};\r\n\r\nexport default connect(mapStateToProps, { imageSelected })(ImageGallary);\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport Calendar from \"./components/Calendar\";\r\nimport ImageGallary from \"./components/imggalary/ImageGallary\";\r\n\r\nimport { datesGenerator } from \"dates-generator\";\r\nimport { connect } from \"react-redux\";\r\n\r\n/* const App = ({ selectedImage, currentMonthNode }) => {\r\n  const [months, setMonths] = useState([]);\r\n\r\n  //console.log(selectedImage);\r\n  //console.log(currentMonthNode);\r\n\r\n  useEffect(() => {\r\n    const today = new Date();\r\n\r\n    const thisYear = today.getFullYear();\r\n    const thisMonth = today.getMonth();\r\n\r\n    const months = Array(thisMonth + 1)\r\n      .fill({})\r\n      .map((_, index) => {\r\n        const { dates } = datesGenerator({\r\n          year: thisYear,\r\n          month: index,\r\n          startingDay: 0,\r\n        });\r\n        return { dates: dates, forMonth: index };\r\n      });\r\n\r\n    setMonths(months);\r\n  }, []);\r\n\r\n  let displayEl = null;\r\n  if (selectedImage?.url) {\r\n    displayEl = <ImageGallary></ImageGallary>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {displayEl}\r\n      <Calendar months={months} isBottom={selectedImage?.url ? true : false} />\r\n    </div>\r\n  );\r\n}; */\r\n\r\nclass App extends React.Component {\r\n  state = { months: [] };\r\n\r\n  componentDidMount() {\r\n    const today = new Date();\r\n\r\n    const thisYear = today.getFullYear();\r\n    const thisMonth = today.getMonth();\r\n\r\n    const Months = Array(thisMonth + 1)\r\n      .fill({})\r\n      .map((_, index) => {\r\n        const { dates } = datesGenerator({\r\n          year: thisYear,\r\n          month: index,\r\n          startingDay: 0,\r\n        });\r\n        return { dates: dates, forMonth: index };\r\n      });\r\n\r\n    this.setState({ months: Months });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // console.log(this.props.currentMonthNode);\r\n    if (this.props.currentMonthNode) {\r\n      this.props.currentMonthNode.scrollIntoView();\r\n    }\r\n  }\r\n\r\n  displayEl = () => {\r\n    if (this.props.selectedImage?.url) {\r\n      return <ImageGallary></ImageGallary>;\r\n    }\r\n    return null;\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {this.displayEl()}\r\n        <Calendar\r\n          months={this.state.months}\r\n          isBottom={this.props.selectedImage?.url ? true : false}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  //console.log(state);\r\n\r\n  return {\r\n    selectedImage: state.selectedImage,\r\n    currentMonthNode: state.CurrentMonthNode,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(App);\r\n","import ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport reducers from \"./reducers\";\r\nimport App from \"./App\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore } from \"redux\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <Provider store={createStore(reducers)}>\r\n    <App />\r\n  </Provider>,\r\n\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}